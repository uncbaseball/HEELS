livebp.pitch.calling <- function(pitcherdata, pitchername, batters, save = F){ # batters is df w/ names & sides
require(lme4)
require(dplyr)
if(!exists("adj.swing")){
od <- getwd()
setwd(paste(substr(getwd(), 1, gregexpr("/", getwd(), fixed = TRUE)[[1]][3]), "Desktop/TAR/Value Calcs", sep = ""))
load("UNC Batter Pitch Value Offsets.RData")
setwd(od)
}
if(!exists("cvs")){
od <- getwd()
setwd(paste(substr(getwd(), 1, gregexpr("/", getwd(), fixed = TRUE)[[1]][3]), "Desktop/TAR/Value Calcs", sep = ""))
load(file = "Counts for Pitch Values.RData")
setwd(od)
}
if(missing(pitchername)){
if(is.element("Pitcher", colnames(pitcherdata))){
pitchername <- mode(pitcherdata$Pitcher)
} else{
pitchername <- ""
}
}
pitcherdata <- pitcherdata[which(!is.na(pitcherdata$RelSpeed)),]
pitcherdata <- pitchtagging(pitcherdata)
pitcherdata <- pitcherdata[which(pitcherdata$TaggedPitchType != "Undefined"),]
pd <- pitcherdata %>%
group_by(TaggedPitchType) %>%
summarise(RelSpeed = mean(RelSpeed), HorzBreak = mean(HorzBreak), InducedVertBreak = mean(InducedVertBreak),
HorzApprAngle = mean(HorzApprAngle), VertApprAngle = mean(VertApprAngle)) %>%
as.data.frame()
pd <- cbind(pd, PitcherThrows = ifelse(mode(pitcherdata$PitcherThrows) == "Right", "Right", "Left"))
pitches <- pd$TaggedPitchType
pred <- cbind(expand.grid(PlateLocSide = seq(-2.5, 2.5, by = 0.25), PlateLocHeight = c(0.025, 0.525, seq(1.025, 5.025, by = 0.25)), CountDiff = c(-2:3)))
pred <- pred[which(abs(pred$PlateLocSide) %in% c(0.5, 1.5, 2.5) | pred$PlateLocHeight > 1),] # if you bounce it--doesn't really matter
pred <- cbind(pred, Count = ifelse(pred$CountDiff >= 2, "hitters", ifelse(pred$CountDiff >= 0, "even", "pitchers")))
pred <- rbind(pred, cbind(pred[which(pred$CountDiff == 0), -ncol(pred)], Count = c("pitchers")))
pred <- merge(pred, cvs, by = c("CountDiff", "Count"), all.x = T)
bigdf <- data.frame()
for(row in c(1:nrow(pitcherdata))){
bigdf <- rbind(bigdf, cbind(pred, pitcherdata[row,]))
}
## should say smooth = T here
preddf <- predict.with.pitchvalue.models(bigdf, phand = unique(substr(pitcherdata$PitcherThrows, 1, 1))[1])
for(row in c(1:nrow(batters))){
if(batters[row, "BatterSide"] == "Left"){
his.preds <- cbind(preddf, Pred.Swing = preddf$SwingL,
Pred.SwingDamage = preddf$SwingDamageL,
Pred.CalledStrike = preddf$CalledStrikeL)
} else{
his.preds <- cbind(preddf, Pred.Swing = preddf$SwingR,
Pred.SwingDamage = preddf$SwingDamageR,
Pred.CalledStrike = preddf$CalledStrikeR)
}
his.preds <- cbind(his.preds, Swing = unname(predict(adj.swing, data.frame(Pred.Swing = his.preds$Pred.Swing, Batter = as.character(batters[row, "Batter"])))),
SwingDamage = unname(predict(adj.swingdamage, data.frame(Pred.SwingDamage = his.preds$Pred.SwingDamage, Batter = as.character(batters[row, "Batter"])))))
his.preds[which(his.preds$Swing < 0), "Swing"] <- c(0)
his.preds[which(his.preds$Pred.CalledStrike < 0), "Pred.CalledStrike"] <- c(0)
his.preds[which(his.preds$Swing > 1), "Swing"] <- c(1)
his.preds[which(his.preds$Pred.CalledStrike > 1), "Pred.CalledStrike"] <- c(1)
his.preds <- cbind(his.preds, Total = (1 - his.preds$Swing) * his.preds$Pred.CalledStrike * his.preds$StrikeValue + his.preds$Swing * (his.preds$SwingDamage - his.preds$X2OPS) + ((1 - his.preds$Swing) * (1 - his.preds$Pred.CalledStrike) * his.preds$BallValue))
his.ag <- his.preds %>%
select(PlateLocSide, PlateLocHeight, TaggedPitchType, Count, Total, Swing) %>%
group_by(PlateLocSide, PlateLocHeight, Count, TaggedPitchType) %>%
summarise(Rollup = mean(Total), Swing = mean(Swing))
his.ag.swing <- his.ag %>%
filter(Swing > 0.5 | Swing > 0.4 & Count == "hitters") %>%
group_by(Count) %>%
top_n(-15, Rollup) %>%
as.data.frame()
his.ag.watch <- his.ag %>%
filter(Swing < 0.5) %>%
group_by(Count) %>%
top_n(-15, Rollup) %>%
as.data.frame()
## put top two swing, top two watch, top two of the rest
## gotta smooth data, then don't plot a pitch if another two are w/in 6in
quartz(height = 12, width = 5.25)
par(mfrow = c(3,1))
for(count in c("even", "pitchers", "hitters")){
plot(0, 0, type = "n", xlim = c(-3.5, 3.5), ylim = c(0, 5), main = paste("Dalatri, Luca vs.", batters[row, "Batter"], "\n", count, "count"), xlab = "Horizontal Location (Pitcher View)", ylab = "Vertical Location")
add.strike.zone(col = "green")
watch <- his.ag.watch[which(his.ag.watch$Count == count),]
watch <- watch[order(watch$Rollup, decreasing = F),]
swing <- his.ag.swing[which(his.ag.swing$Count == count),]
swing <- swing[order(swing$Rollup, decreasing = F),]
toplot <- rbind(watch[c(1, 2),], swing[c(1, 2),])
rest <- rbind(watch[c(3:nrow(watch)),], swing[c(3:nrow(swing)),])
rest <- rest[order(rest$Rollup, decreasing = F),]
while(nrow(toplot) < 6 & nrow(rest) > 0){
thatp <- toplot[which(toplot$TaggedPitchType == rest[1, "TaggedPitchType"])]
if((nrow(thatp) > 1) && (length(which(sqrt((thatp$PlateLocSide - rest[1, "PlateLocSide"])^2 + (thatp$PlateLocHeight - rest[1, "PlateLocHeight"])^2) <= 0.5)) >= 2)){
} else{
toplot <- rbind(toplot, as.data.frame(rest[1,]))
}
rest <- rest[-c(1),]
toplot <- toplot[which(!is.na(toplot$PlateLocSide)),]
toplot <- unique(toplot)
}
max.ru <- max(toplot$Rollup)
text(toplot$PlateLocSide, toplot$PlateLocHeight, toplot$TaggedPitchType, col = ifelse(toplot$Swing >= 0.5 | toplot$Swing >= 0.4 & count == "hitters", "red", "black"), cex = 1.15 * toplot$Rollup / max.ru)
}
if(save){
quartz.save(file = paste(pitchername, "vs.", batters[row, "Batter"], ".png"), type = "png")
}
}
graphics.off()
}
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); print(mean(c(1000, 5000, 100000))); proc.time() - t1
t1 <- proc.time(); print(1/3 * 1000 + 1/3 * 5000 + 1/3 * 100000))); proc.time() - t1
t1 <- proc.time(); print(1/3 * 1000 + 1/3 * 5000 + 1/3 * 100000); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
batters
livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters)
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters); proc.time() - t1
warnings()
graphics.off()
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters); proc.time() - t1
pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),]
require(lme4)
require(dplyr)
if(!exists("adj.swing")){
od <- getwd()
setwd(paste(substr(getwd(), 1, gregexpr("/", getwd(), fixed = TRUE)[[1]][3]), "Desktop/TAR/Value Calcs", sep = ""))
load("UNC Batter Pitch Value Offsets.RData")
setwd(od)
}
if(!exists("cvs")){
od <- getwd()
setwd(paste(substr(getwd(), 1, gregexpr("/", getwd(), fixed = TRUE)[[1]][3]), "Desktop/TAR/Value Calcs", sep = ""))
load(file = "Counts for Pitch Values.RData")
setwd(od)
}
if(missing(pitchername)){
if(is.element("Pitcher", colnames(pitcherdata))){
pitchername <- mode(pitcherdata$Pitcher)
} else{
pitchername <- ""
}
}
pitchername <- mode(pitcherdata$Pitcher)
pitchername
pitcherdata <- pitcherdata[which(!is.na(pitcherdata$RelSpeed)),]
pitcherdata <- pitchtagging(pitcherdata)
pitcherdata <- pitcherdata[which(pitcherdata$TaggedPitchType != "Undefined"),]
pd <- pitcherdata %>%
group_by(TaggedPitchType) %>%
summarise(RelSpeed = mean(RelSpeed), HorzBreak = mean(HorzBreak), InducedVertBreak = mean(InducedVertBreak),
HorzApprAngle = mean(HorzApprAngle), VertApprAngle = mean(VertApprAngle)) %>%
as.data.frame()
pd <- cbind(pd, PitcherThrows = ifelse(mode(pitcherdata$PitcherThrows) == "Right", "Right", "Left"))
pitches <- pd$TaggedPitchType
pred <- cbind(expand.grid(PlateLocSide = seq(-2.5, 2.5, by = 0.25), PlateLocHeight = c(0.025, 0.525, seq(1.025, 5.025, by = 0.25)), CountDiff = c(-2:3)))
pred <- pred[which(abs(pred$PlateLocSide) %in% c(0.5, 1.5, 2.5) | pred$PlateLocHeight > 1),] # if you bounce it--doesn't really matter
pred <- cbind(pred, Count = ifelse(pred$CountDiff >= 2, "hitters", ifelse(pred$CountDiff >= 0, "even", "pitchers")))
pred <- rbind(pred, cbind(pred[which(pred$CountDiff == 0), -ncol(pred)], Count = c("pitchers")))
pred <- merge(pred, cvs, by = c("CountDiff", "Count"), all.x = T)
bigdf <- data.frame()
for(row in c(1:nrow(pitcherdata))){
bigdf <- rbind(bigdf, cbind(pred, pitcherdata[row,]))
}
nrow(pitcherdata)
nrow(pd)
head(pitcherdata)
head(pd)
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters); proc.time() - t1
12 * 12
144 / 60
#t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters, smooth = T); proc.time() - t1
#t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters, smooth = T); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters, smooth = T); proc.time() - t1
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = batters); proc.time() - t1
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle", "Gahagan, Zack"), BatterSide = c("Right"))); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle"), BatterSide = c("Right")), smooth = T); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle"), BatterSide = c("Right")), smooth = T); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle"), BatterSide = c("Right")), smooth = T); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle"), BatterSide = c("Right")), smooth = T); proc.time() - t1
12 * 12 * 7 / 60
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle"), BatterSide = c("Right")), smooth = T); proc.time() - t1
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle", "Gahagan, Zack"), BatterSide = c("Right")), smooth = T); proc.time() - t1
graphics.off()
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle", "Gahagan, Zack"), BatterSide = c("Right")), smooth = T); proc.time() - t1
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle", "Gahagan, Zack"), BatterSide = c("Right")), smooth = T); proc.time() - t1
seq(1.025, 5.025, by = 0.25)
seq(1.025, 4.775, by = 0.25)
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Gahagan, Zack"), BatterSide = c("Right")), smooth = T); proc.time() - t1
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Datres, Kyle"), BatterSide = c("Right")), smooth = T); proc.time() - t1
t1 <- proc.time(); livebp.pitch.calling(pitcherdata = pvdat[which(pvdat$Pitcher == "Dalatri, Luca"),], batters = data.frame(Batter = c("Gahagan, Zack"), BatterSide = c("Right")), smooth = F); proc.time() - t1
graphics.off()
setwd("/Users/micahdaley-harris/Desktop/TAR/TAR Database")
bp <- read.csv(file = "BP 1.11.18.csv", stringsAsFactors = F)
table(bp$PitcherTeam)
table(bp[which(!is.na(bp$ExitSpeed)), "PitcherTeam"])
bpbreakdown(bp[which(bp$PitcherTeam %in% c("Casparius, Ben", "Enwiller, Dylan", "Hesterlee, Jackson", "Illies, Brendan", "Roberts, Cody")),], game = F)
source('~/Desktop/TAR/Batter/Generate BP Breakdown.R')
bpbreakdown(bp[which(bp$PitcherTeam %in% c("Casparius, Ben", "Enwiller, Dylan", "Hesterlee, Jackson", "Illies, Brendan", "Roberts, Cody")),], game = F)
source('~/Desktop/TAR/Batter/Generate BP Breakdown.R')
bpbreakdown(bp[which(bp$PitcherTeam %in% c("Casparius, Ben", "Enwiller, Dylan", "Hesterlee, Jackson", "Illies, Brendan", "Roberts, Cody")),], game = F)
source('~/Desktop/TAR/Batter/Generate BP Breakdown.R')
bpbreakdown(bp[which(bp$PitcherTeam %in% c("Casparius, Ben")),], game = F)
source('~/Desktop/TAR/Batter/Generate BP Breakdown.R')
bpbreakdown(bp[which(bp$PitcherTeam %in% c("Casparius, Ben")),], game = F)
source('~/Desktop/TAR/Batter/Generate BP Breakdown.R')
bpbreakdown(bp[which(bp$PitcherTeam %in% c("Casparius, Ben")),], game = F)
source('~/Desktop/TAR/Batter/Generate BP Breakdown.R')
bpbreakdown(bp[which(bp$PitcherTeam %in% c("Casparius, Ben")),], game = F)
bpbreakdown(bp[which(bp$PitcherTeam %in% c("Casparius, Ben", "Enwiller, Dylan", "Hesterlee, Jackson", "Illies, Brendan", "Roberts, Cody")),], game = F)
source('~/Desktop/TAR/Batter/Generate BP Breakdown.R')
livebp <- read.csv(file = "Live BP 1.11.18.csv", stringsAsFactors = F)
head(livebp)
source('~/Desktop/TAR/Batter/Generate BP Breakdown.R')
livebp <- slide.trackman.columns(livebp)
head(livebp)
table(livebp$Batter)
livebp <- livebp[which(livebp$PitchCall != "Undefined"),]
head(livebp)
table(livebp$Batter)
bpbreakdown(livebp, game = T)
pitcherdata <- dbGetQuery(tarconn, "SELECT * FROM `UNCall` WHERE `PitcherTeam` IN('NOR_TAR', 'NOR_TAR2')")
source("/Users/micahdaley-harris/Desktop/Just Link to MySQL.r")
pitcherdata <- dbGetQuery(tarconn, "SELECT * FROM `UNCall` WHERE `PitcherTeam` IN('NOR_TAR', 'NOR_TAR2')")
pitcherdata <- dbGetQuery(tarconn, "SELECT * FROM `UNCall` WHERE `PitcherTeam` IN('NOR_TAR', 'NOR_TAR2') AND RIGHT(`Date`, 1) = 7")
table(pitcherdata$Pitcher)
ps <- unique(pitcherdata$Pitcher)
t(ps)
ps
current.ps <- ps[-c(1, 8, 10, 12, 14, 16:18, 20, 25, 26)]
current.ps
pitcherdata <- pitcherdata[which(is.element(pitcherdata$Pitcher, current.ps)),]
table(pitcherdata$Pitcher)
pitcherdata <- pitcherdata[order(as.Date(pitcherdata$Date, format = "%m/%d/%Y")),]
head(pitcherdata)
tail(pitcherdata)
unique(pitcherdata$Date)
pitcherdata <- pitcherdata[order(as.Date(pitcherdata$Date, format = "%m/%d/%Y"), decreasing = T),]
unique(pitcherdata$Date)
plot(density(livebp[which(livebp$Pitcher == "Baum, Tyler"),"RelSpeed"]))
max(livebp[which(livebp$Pitcher == "Baum, Tyler"),"RelSpeed"])
length(which(livebp[which(livebp$Pitcher == "Baum, Tyler"),"RelSpeed"] > 94))
hitterdata <- dbGetQuery(tarconn, "SELECT * FROM `UNCall` WHERE `BatterTeam` IN('NOR_TAR', 'NOR_TAR2') AND RIGHT(`Date`, 1) >= 7")
head(hitterdata)
table(hitterdata$Batter)
sort(unique(hitterdata$Date))
dir()[grep("Machine", dir())]
hs
hs <- unique(hitterdata$Batter)
hs
current.hs <- hs[-c(1, 5, 6, 7, 9, 10, 13, 15, 16, 31)]
hitterdata <- hitterdata[which(is.element(hitterdata$Batter, current.hs)),]
getwd()
setwd("/Users/micahdaley-harris/Desktop/TAR/Value Calcs")
#save(nodat.bb.expvals, file = "TM Missing Data Exp Bat Ball Values.RData")
head(nodat.bb.expvals)
save(nodat.bb.expvals, file = "TM Missing Data Exp Bat Ball Values.RData")
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
hitterdata.preped <- pitchvalue.prep(hitterdata)
head(hitterdata.preped)
hd.predL <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Left")], smooth = F, phand = "L")
hd.predL <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Left"),], smooth = F, phand = "L")
hd.predR <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right"),], smooth = F, phand = "R")
max(hitterdata[which(hitterdata$Batter == "Gahagan, Zack"), "ExitSpeed"])
max(hitterdata[which(hitterdata$Batter == "Gahagan, Zack"), "ExitSpeed"], na.rm = T)
hitterdata[which(hitterdata$Batter == "Hesterlee, Jackson"), ]
livebp[which(livebp$Batter == "Hesterlee, Jackson"), ]
max(livebp[which(livebp$Batter == "Gahagan, Zack"), "ExitSpeed"], na.rm = T)
nrow(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right"),])
hd.predR <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right"),], smooth = F, phand = "R")
hd.predR <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right" & !is.na(hitterdata.preped$RelSpeed)),], smooth = F, phand = "R")
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
hd.predR <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right" & !is.na(hitterdata.preped$RelSpeed)),], smooth = F, phand = "R")
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
hitterdata.preped <- pitchvalue.prep(hitterdata)
hd.predR <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right" & !is.na(hitterdata.preped$RelSpeed)),], smooth = F, phand = "R")
nrow(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right" & !is.na(hitterdata.preped$RelSpeed)),])
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
hd.predR <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right" & !is.na(hitterdata.preped$RelSpeed)),], smooth = F, phand = "R")
table(hitterdata.preped$Count)
table(hitterdata.preped[,c("Balls", "Strikes")])
alldata <- hitterdata
pvdat <- cbind(alldata, BatsL = as.numeric(alldata$BatterSide == "Left"), CountDiff = alldata$Balls - alldata$Strikes)
table(pvdat$CountDiff)
pvdat <- cbind(pvdat, Count = ifelse(alldata$Strikes == 2 & alldata$Balls < 3 | alldata$Balls == 0 & alldata$Strikes == 1, "pitchers", ifelse(alldata$Balls >= 2 & alldata$CountDiff >= 2, "hitters", "even")))
table(pvdat$Count)
nrow(pvdat)
length(which(is.na(pvdat$Count)))
length(which(is.na(pvdat$Balls)))
length(which(is.na(pvdat$Strikes)))
length(which(is.na(pvdat$CountDiff)))
counts <- ifelse(alldata$Strikes == 2 & alldata$Balls < 3 | alldata$Balls == 0 & alldata$Strikes == 1, "pitchers", ifelse(alldata$Balls >= 2 & alldata$CountDiff >= 2, "hitters", "even"))
table(counts)
counts <- ifelse((alldata$Strikes == 2 & alldata$Balls < 3 | alldata$Balls == 0 & alldata$Strikes == 1), "pitchers", ifelse(alldata$Balls >= 2 & alldata$CountDiff >= 2, "hitters", "even"))
table(counts)
length(which(alldata$Strikes == 2 & alldata$Balls < 3 | alldata$Balls == 0 & alldata$Strikes == 1))
length(which(alldata$Balls >= 2 & alldata$CountDiff >= 2))
table(alldata[,c("Balls", "CountDiff")])
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
hitterdata.preped <- pitchvalue.prep(hitterdata)
hd.predR <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right" & !is.na(hitterdata.preped$RelSpeed)),], smooth = F, phand = "R")
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
hd.predR <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Right" & !is.na(hitterdata.preped$RelSpeed)),], smooth = F, phand = "R")
hd.predL <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Left" & !is.na(hitterdata.preped$RelSpeed)),], smooth = F, phand = "L")
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
hd.predL <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Left" & !is.na(hitterdata.preped$RelSpeed)),], smooth = F, phand = "L")
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
hd.predL <- predict.with.pitchvalue.models(hitterdata.preped[which(hitterdata.preped$PitcherThrows == "Left" & !is.na(hitterdata.preped$RelSpeed)),], smooth = F, phand = "L")
hd.pred <- rbind(cbind(hd.predL, Pred.Swing = hd.predL$SwingL, Pred.SwingDamage = hd.predL$SwingDamageL), cbind(hd.predR, Pred.Swing = hd.predR$SwingR, Pred.SwingDamage = hd.predR$SwingDamageR))
adj.swing <- lmer(as.formula("Swing ~ Pred.Swing + (1|Batter)"), data = hd.pred)
head(hd.pred)
table(hd.pred$PitchCall)
hd.pred <- cbind(hd.pred, Swing = as.numeric(hd.pred$PitchCall %in% c("FoulBall", "InPlay", "StrikeSwinging")))
hd.pred <- hd.pred[which(!is.element(hd.pred$PitchCall, c("BallIntentional", "Undefined"))),]
adj.swing <- lmer(as.formula("Swing ~ Pred.Swing + (1|Batter)"), data = hd.pred)
adj.swingdamage <- lmer(as.formula("Exp2OPS ~ Pred.SwingDamage + (1|Batter)"), data = hd.pred[which(hd.pred$PitchCall == "InPlay"),])
summary(adj.swing)
summary(adj.swingdamage)
adj.swingdamage <- lmer(as.formula("Exp2OPS ~ Pred.SwingDamage + (1|Batter)"), data = pp[which(pp$BatterTeam %in% c("NOR_TAR", "NOR_TAR2") & pp$PitchCall == "InPlay"),])
summary(adj.swingdamage)
scatter.smooth(hd.pred[which(hd.pred$PitchCall == "InPlay"), "Pred.SwingDamage"], hd.pred[which(hd.pred$PitchCall == "InPlay"), "Exp2OPS"])
scatter.smooth(hd.pred[which(hd.pred$PitchCall == "InPlay"), "Pred.SwingDamage"], hd.pred[which(hd.pred$PitchCall == "InPlay"), "Exp2OPS"], lpars = list(col = "red"))
scatter.smooth(pp[which(pp$PitchCall == "InPlay"), "Pred.SwingDamage"], pp[which(pp$PitchCall == "InPlay"), "Exp2OPS"], lpars = list(col = "red"))
nrow(pp)
nrow(hd.pred)
unique(pp$Batter)
nrow(pp[which(pp$BatterTeam %in% c("NOR_TAR", "NOR_TAR2") & pp$PitchCall == "InPlay"),])
nrow(hd.pred[which(hd.pred$PitchCall == "InPlay"),])
unique(pp[which(pp$BatterTeam %in% c("NOR_TAR", "NOR_TAR2") & pp$PitchCall == "InPlay"),"Batter"])
length(which(pp$Pred.Swing == pp$Pred.SwingR))
length(which(pp$Pred.Swing == pp$Pred.SwingL))
length(which(pp$Pred.Swing == pp$SwingR))
length(which(pp$Pred.Swing == pp$SwingL))
pp[which(pp$BatterSide == "Left"), "Pred.Swing"] <- pp[which(pp$BatterSide == "Left"), "SwingL"]
length(which(pp$Pred.Swing == pp$SwingL))
pp[which(pp$BatterSide == "Left"), "Pred.SwingDamage"] <- pp[which(pp$BatterSide == "Left"), "SwingDamageL"]
length(which(pp$Pred.SwingDamage == pp$SwingDamageL))
length(which(pp$Pred.SwingDamage == pp$SwingDamageR))
ncol(pp)
ncol(hd.pred)
hd.pred.abbrev <- hd.pred[,c("Batter", "Swing", "Pred.Swing", "Pred.SwingDamage", "Exp2OPS")]
pp.abbrev <- pp[,c("Batter", "Swing", "Pred.Swing", "Pred.SwingDamage", "Exp2OPS")]
both <- rbind(hd.pred.abbrev, pp.abbrev)
adj.swing <- lmer(as.formula("Swing ~ Pred.Swing + (1|Batter)"), data = both)
summary(adj.swing)
adj.swingdamage <- lmer(as.formula("Exp2OPS ~ Pred.SwingDamage + (1|Batter)"), data = both[which(both$PitchCall == "InPlay"),])
hd.pred.abbrev <- hd.pred[,c("Batter", "Swing", "Pred.Swing", "Pred.SwingDamage", "Exp2OPS", "PitchCall")]
pp.abbrev <- pp[,c("Batter", "Swing", "Pred.Swing", "Pred.SwingDamage", "Exp2OPS", "PitchCall")]
both <- rbind(hd.pred.abbrev, pp.abbrev) # increasing samp size to increase weight of Pred. values
adj.swingdamage <- lmer(as.formula("Exp2OPS ~ Pred.SwingDamage + (1|Batter)"), data = both[which(both$PitchCall == "InPlay"),])
summary(adj.swingdamage)
batters <- hitterdata %>%
group_by(Batter) %>%
summarise(BatterSide = mode(BatterSide)) %>%
as.data.frame()
batters
for(p in current.ps[1]){
pdat <- pitcherdata[which(pitcherdata$Pitcher == p),]
pdat <- pdat[c(1:min(nrow(pdat), 250)),]
livebp.pitch.calling(pitcherdata = pdat, batters = batters, smooth = T, save = F)
}
getwd()
graphics.off()
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
t1 <- proc.time()
for(p in current.ps){
pdat <- pitcherdata[which(pitcherdata$Pitcher == p),]
pdat <- pdat[c(1:min(nrow(pdat), 250)),]
livebp.pitch.calling(pitcherdata = pdat, batters = batters, smooth = T, save = T)
}
graphics.off()
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
gewtd()
getwd()
setwd("/Users/micahdaley-harris/Desktop/TAR/Pitcher")
t1 <- proc.time()
for(p in current.ps){
pdat <- pitcherdata[which(pitcherdata$Pitcher == p),]
pdat <- pdat[c(1:min(nrow(pdat), 250)),]
livebp.pitch.calling(pitcherdata = pdat, batters = batters, smooth = T, save = T)
}
proc.time() - t1
2476 / 60
nrow(batters)
length(current.ps)
18 * 21
378 / 41
2476 / 378
head(pdat)
pitch.averages <- function(pitcherdata){
pd <- pitcherdata %>%
group_by(TaggedPitchType) %>%
summarise(RelSpeed = mean(RelSpeed), HorzBreak = mean(HorzBreak), InducedVertBreak = mean(InducedVertBreak),
HorzApprAngle = mean(HorzApprAngle), VertApprAngle = mean(VertApprAngle)) %>%
mutate(PitcherThrows = mode(pitcherdata$PitcherThrows))
as.data.frame()
return(pd)
}
pitch.averages(pdat)
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
pitch.averages(pdat)
pitch.averages <- function(pitcherdata){
source(paste(substr(getwd(), 1, gregexpr("/", getwd(), fixed = TRUE)[[1]][3]), "Desktop/TAR/Pitcher/Pitch Tagging.r", sep = ""))
pitcherdata <- pitchtagging(pitcherdata)
pd <- pitcherdata %>%
group_by(TaggedPitchType) %>%
summarise(RelSpeed = mean(RelSpeed), HorzBreak = mean(HorzBreak), InducedVertBreak = mean(InducedVertBreak),
HorzApprAngle = mean(HorzApprAngle), VertApprAngle = mean(VertApprAngle)) %>%
mutate(PitcherThrows = mode(pitcherdata$PitcherThrows)) %>%
as.data.frame()
return(pd)
}
pitch.averages(pdat)
pitch.averages <- function(pitcherdata){
source(paste(substr(getwd(), 1, gregexpr("/", getwd(), fixed = TRUE)[[1]][3]), "Desktop/TAR/Pitcher/Pitch Tagging.r", sep = ""))
pitcherdata <- pitchtagging(pitcherdata)
pd <- pitcherdata %>%
group_by(TaggedPitchType) %>%
summarise(RelSpeed = mean(RelSpeed), HorzBreak = mean(HorzBreak), InducedVertBreak = mean(InducedVertBreak),
HorzApprAngle = mean(HorzApprAngle), VertApprAngle = mean(VertApprAngle)) %>%
mutate(PitcherThrows = mode(pitcherdata$PitcherThrows)) %>%
filter(TaggedPitchType != "Undefined") %>%
as.data.frame()
return(pd)
}
pitch.averages(pdat)
pa <- pitch.ave
pa <- pitch.averages(pdat)
pitch.averages <- function(pitcherdata){
source(paste(substr(getwd(), 1, gregexpr("/", getwd(), fixed = TRUE)[[1]][3]), "Desktop/TAR/Pitcher/Pitch Tagging.r", sep = ""))
pitcherdata <- pitchtagging(pitcherdata)
pd <- pitcherdata %>%
group_by(TaggedPitchType) %>%
summarise(RelSpeed = mean(RelSpeed), HorzBreak = mean(HorzBreak), InducedVertBreak = mean(InducedVertBreak),
HorzApprAngle = mean(HorzApprAngle), VertApprAngle = mean(VertApprAngle)) %>%
mutate(PitcherThrows = mode(pitcherdata$PitcherThrows)) %>%
filter(TaggedPitchType != "Undefined") %>%
arrange(RelSpeed) %>%
as.data.frame()
return(pd)
}
pa <- pitch.averages(pdat)
pa
?arrange
pitch.averages <- function(pitcherdata){
source(paste(substr(getwd(), 1, gregexpr("/", getwd(), fixed = TRUE)[[1]][3]), "Desktop/TAR/Pitcher/Pitch Tagging.r", sep = ""))
pitcherdata <- pitchtagging(pitcherdata)
pd <- pitcherdata %>%
group_by(TaggedPitchType) %>%
summarise(RelSpeed = mean(RelSpeed), HorzBreak = mean(HorzBreak), InducedVertBreak = mean(InducedVertBreak),
HorzApprAngle = mean(HorzApprAngle), VertApprAngle = mean(VertApprAngle)) %>%
mutate(PitcherThrows = mode(pitcherdata$PitcherThrows)) %>%
filter(TaggedPitchType != "Undefined") %>%
arrange(RelSpeed, desc()) %>%
as.data.frame()
return(pd)
}
pa <- pitch.averages(pdat)
pitch.averages <- function(pitcherdata){
source(paste(substr(getwd(), 1, gregexpr("/", getwd(), fixed = TRUE)[[1]][3]), "Desktop/TAR/Pitcher/Pitch Tagging.r", sep = ""))
pitcherdata <- pitchtagging(pitcherdata)
pd <- pitcherdata %>%
group_by(TaggedPitchType) %>%
summarise(RelSpeed = mean(RelSpeed), HorzBreak = mean(HorzBreak), InducedVertBreak = mean(InducedVertBreak),
HorzApprAngle = mean(HorzApprAngle), VertApprAngle = mean(VertApprAngle)) %>%
mutate(PitcherThrows = mode(pitcherdata$PitcherThrows)) %>%
filter(TaggedPitchType != "Undefined") %>%
arrange(desc(RelSpeed)) %>%
as.data.frame()
return(pd)
}
pa <- pitch.averages(pdat)
pa
source('~/Desktop/TAR/Value Calcs/Pitch Value Eval.R')
pd
row <- 1
fd <- data.frame()
fd <- rbind(fd, cbind(pitchvalue(phand = substr(pd[row, "PitcherThrows"], 1, 1), x = pd[row,], givelocations = T, smooth = F)[[2]], TaggedPitchType = pd[row, "TaggedPitchType"]))
?slice
head(groupdata)
bp <- read.csv(file = "BP 1.12.18.csv", stringsAsFactors = F)
setwd("/Users/micahdaley-harris/Desktop/TAR/TAR Database")
bp <- read.csv(file = "BP 1.12.18.csv", stringsAsFactors = F)
bp <- read.csv(file = "Live BP 1.12.18.csv", stringsAsFactors = F)
bp <- slide.trackman.columns(bp)
head(bp)
bp <- livebp
livebp <- read.csv(file = "Live BP 1.12.18.csv", stringsAsFactors = F)
bp <- read.csv(file = "BP 1.12.18.csv", stringsAsFactors = F)
bp <- slide.trackman.columns(bp)
livebp <- slide.trackman.columns(livebp)
livebp <- livebp[which(livebp$PitchCall != "Undefined"),]
table(livebp$Batter)
table(bp$Batter)
bp <- bp[which(!is.element(bp$Batter, c("", "Blendinger, Kyle"))),]
bpbreakdown(bp)
bpbreakdown(livebp)
bpbreakdown(livebp, game = T)
